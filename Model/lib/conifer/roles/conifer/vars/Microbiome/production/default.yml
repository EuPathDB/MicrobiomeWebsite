# $SourceFileURL$
---
modelconfig_adminEmail:
  - "{{ 'aurreco$uga.edu'|replace('$', '@') }}"
  - "{{ 'epharper$upenn.edu'|replace('$', '@') }}"
  - "{{ 'dfalke$uga.edu'|replace('$', '@') }}"
  - "{{ 'rdoherty$upenn.edu'|replace('$', '@') }}"
  - "{{ 'sfischer$pcbi.upenn.edu'|replace('$', '@') }}"
  - "{{ 'jtlong$upenn.edu'|replace('$', '@') }}"

modelconfig_appDb_maxIdle: 10
modelconfig_appDb_maxActive: 40
modelconfig_userDb_maxIdle: 10
modelconfig_commentdb.maxIdle: 10

modelprop:
  GOOGLE_ANALYTICS_ID:  "{{ lookup('euparc',
  'attr=google_analytics_id xpath=sites/site[@hostname=\"{}\"] default='.format( hostname|swap_hostname(_host_frontends) )
  )
}}"


# this mapping allow different configs based on hostname.  Mainly used to give
# different configs to qN.sitedb.org sites, it could be extended to others
#
# NOTE: the login needs to be specified twice, once as the login, and once in
# the lookup.  I can't see a way to cleanly resolve the recursive loop issue.
# (it can't be flat and still be a map)

workspace_env_map:
  b_prefix:
    host: irods.eupathdb.org
    login: wrkspuser
    password: "{{ lookup('euparc',
      'attr=password xpath=workspaces/irods[@user=\"{}\"]'.format('wrkspuser')
      )
    }}"
    resource: ebrcResc
    rootPath: /ebrc/workspaces/users
    zone: ebrc
    port: 1247
  w_prefix:
    host: irods.eupathdb.org
    login: wrkspuser
    password: "{{ lookup('euparc',
      'attr=password xpath=workspaces/irods[@user=\"{}\"]'.format('wrkspuser')
      )
    }}"
    resource: ebrcResc
    rootPath: /ebrc/workspaces/users
    zone: ebrc
    port: 1247
  default:
    host: irods.qa.eupathdb.org
    login: qawrkspuser
    password: "{{ lookup('euparc',
      'attr=password xpath=workspaces/irods[@user=\"{}\"]'.format('qawrkspuser')
      )
    }}"
    resource: ebrcResc
    rootPath: /ebrc/workspaces/users
    zone: ebrc
    port: 1247

# construct a prefix from hostname, like w_prefix, q_prefix
prefix: "{{ hostname | regex_replace('^([a-z])[0-9].*','\\1_prefix') }}"

# use that prefix to reference the workspace_env_map above, if there is no key
# available, default to the 'default' map
workspace_env: "{{ workspace_env_map[prefix]|default(workspace_env_map['default']) }}"

modelconfig_userDatasetStoreConfig_irods_host: "{{ workspace_env['host'] }}"
modelconfig_userDatasetStoreConfig_irods_login: "{{ workspace_env['login'] }}"
modelconfig_userDatasetStoreConfig_irods_password: "{{ workspace_env['password'] }}"
modelconfig_userDatasetStoreConfig_irods_resource: "{{ workspace_env['resource'] }}"
modelconfig_userDatasetStoreConfig_irods_rootPath: "{{ workspace_env['rootPath'] }}"
modelconfig_userDatasetStoreConfig_irods_zone: "{{ workspace_env['zone'] }}"
modelconfig_userDatasetStoreConfig_irods_port: "{{ workspace_env['port'] }}"

modelconfig_userDatasetStoreConfig: >
 <userDatasetStore implementation="org.gusdb.wdk.model.user.dataset.irods.IrodsUserDatasetStore">
   <property name="login">{{ modelconfig_userDatasetStoreConfig_irods_login }}</property>
   <property name="password">{{ modelconfig_userDatasetStoreConfig_irods_password }}</property>
   <property name="host">{{ modelconfig_userDatasetStoreConfig_irods_host }}</property>
   <property name="port">{{ modelconfig_userDatasetStoreConfig_irods_port }}</property>
   <property name="resource">{{ modelconfig_userDatasetStoreConfig_irods_resource }}</property>
   <property name="zone">{{ modelconfig_userDatasetStoreConfig_irods_zone }}</property>
   <property name="rootPath">{{ modelconfig_userDatasetStoreConfig_irods_rootPath }}</property>
   <typeHandler type="example" version="1.0" implementation="org.gusdb.wdk.model.user.dataset.ExampleTypeHandler"/>
   <typeHandler type="BIOM" version="1.0, 2.0, or 2.1" implementation="org.apidb.apicommon.model.userdataset.BiomTypeHandler"/>
  </userDatasetStore>
