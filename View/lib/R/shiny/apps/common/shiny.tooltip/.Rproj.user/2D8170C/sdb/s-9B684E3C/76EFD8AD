{
    "collab_server" : "",
    "contents" : "# Declaring the packages\nlibrary(shiny)\nlibrary(ggplot2)\ndevtools::load_all(\"../common/mbiome\")\ndevtools::load_all(\"../common/shiny.tooltip\")\nsource(\"../common/config.R\")\nsource(\"../common/ggplot_extension.R\")\n\n\nshinyServer(function(input, output, session) {\n  mstudy_obj <- NULL\n  mstats <- NULL\n  cor_result<-NULL\n  column_x<-NULL\n  column_y<-NULL\n  hash_colors <- NULL\n\n  # variables to define some plot parameters\n  NUMBER_TAXA <- 10\n  MAX_SAMPLES_NO_RESIZE <- 40\n  MIN_HEIGHT_AFTER_RESIZE <- 12\n\n  NO_METADATA_SELECTED <- \"No Metadata Selected\"\n\n  oldw <- getOption(\"warn\")\n\n  ggplot_object <- NULL\n  ggplot_build_object <- NULL\n\n  load_microbiome_data <- reactive({\n    if(is.null(mstudy_obj)){\n\n      abundance_file <- \"MicrobiomeSampleByMetadata_TaxaRelativeAbundance.txt\"\n      sample_file <- \"MicrobiomeSampleByMetadata_Characteristics.txt\"\n\n      mstudy_obj <<- import.eupath(\n        taxa_abundance_path = abundance_file,\n        sample_path = sample_file,\n        aggregate_by = input$taxonLevel\n      )\n      mstats <<- MicrobiomeStats$new(mstudy_obj)\n\n    }\n\n    otus<-mstudy_obj$get_otus_by_level(input$taxonLevel)\n    cor_type<-input$corType\n    taxon_level<-input$taxonLevel\n    if(identical(cor_type, \"tm\")){\n      column_y<<-taxon_level\n      column_x<<-\"metadata\"\n    }else if(identical(cor_type, \"mm\")){\n      column_y<<-\"metadata.1\"\n      column_x<<-\"metadata.2\"\n    }else{\n      column_y<<-paste0(taxon_level,\".1\")\n      column_x<<-paste0(taxon_level,\".2\")\n    }\n    options(warn=-1)\n    cor_result<<-mstats$calculate_correlation(taxon_level, cor_type)\n    options(warn=oldw)\n\n    mstudy_obj\n  })\n\n\n  correlationChartFunction <- function(){}\n  output$correlationChart <- renderUI({\n    shinyjs::hide(\"divContent\")\n    shinyjs::show(\"chartLoading\")\n    mstudy <- load_microbiome_data()\n\n    result_to_show<-NULL\n    if(!identical(input$category, \"\")){\n      quantity_samples <- mstudy$sample_table$get_sample_count()\n      isolate(cor_type<-input$corType)\n      isolate(taxon_level<-input$taxonLevel)\n\n      p <-input$pvalueCutoff\n\n      result <- subset(cor_result, pvalue<p)\n      # print(result)\n      cols <- colnames(cor_result)[1:2]\n      result[,(cols):= lapply(.SD, as.factor), .SDcols = cols]\n      # if(identical(cor_type, \"tm\")){\n      #\n      # }else if(identical(cor_type, \"tt\")){\n      #   cols <- c(paste0(taxon_level,\".1\"), paste0(taxon_level,\".2\"))\n      #   result[,(cols):= lapply(.SD, as.factor), .SDcols = cols]\n      # }\n      if(nrow(result)>0){\n        if(identical(input$plotTypeRadio, \"dotplot\")){\n          chart<-ggplot(result, aes_string(x=cols[2], y=cols[1]))+\n            geom_point(aes_string(color=\"rho\", size=\"size\"))+\n            scale_size(range = c(3, 9), guide = 'none')+\n            theme_eupath_default(legend.position = \"bottom\")+\n            scale_colour_gradient(low = \"red\", high = \"blue\")+\n            labs(x=\"Metadata\", y=taxon_level, color=\"Spearman rho\")+\n            guides(colour = guide_colourbar(title.position=\"top\", title.hjust = 0.5))\n        }else{\n          chart<-ggplot(result, aes_string(x=cols[2], y=cols[1], fill= \"rho\"))+\n            geom_tile()+\n            theme_eupath_default(legend.position = \"bottom\")+\n            scale_fill_gradient(low = \"red\", high = \"blue\")+\n            labs(x=\"Metadata\", y=taxon_level, fill=\"Spearman rho\")+\n            guides(fill = guide_colourbar(title.position=\"top\", title.hjust = 0.5))\n        }\n        ggplot_object<<-chart\n        ggplot_build_object<<-ggplot_build(chart)\n\n        output$plotWrapper<-renderPlot({\n          chart\n        })\n\n        quantity_samples<-nrow(result)\n\n        if(quantity_samples<MAX_SAMPLES_NO_RESIZE){\n          result_to_show<-plotOutput(\"plotWrapper\",\n             hover = hoverOpts(\"plot_hover\", delay = 100, delayType = \"throttle\"),\n             click = clickOpts(\"plot_click\"),\n             dblclick = dblclickOpts(\"plot_dblclick\"),\n             width = \"100%\", height = \"500px\"\n           )\n        }else{\n          result_to_show<-plotOutput(\"plotWrapper\",\n            hover = hoverOpts(\"plot_hover\", delay = 100, delayType = \"throttle\"),\n            click = clickOpts(\"plot_click\"), width = \"100%\",\n            height = quantity_samples*MIN_HEIGHT_AFTER_RESIZE\n          )\n        }\n        cols_to_show<-result[, !\"size\", with=FALSE]\n        output$datatableOutput<-renderDataTable(cols_to_show)\n                                                # options = list(\n                                                #   order = list(list(1, 'desc'))\n                                                # )\n      }else{\n        output$datatableOutput<-renderDataTable(NULL)\n        result_to_show<-h5(class=\"alert alert-warning\", \"There is no correlation with the selected parameters.\")\n      }\n    }else{\n      output$datatableOutput<-renderDataTable(NULL)\n    }\n\n    shinyjs::hide(\"chartLoading\", anim = TRUE, animType = \"slide\")\n    shinyjs::show(\"divContent\")\n    result_to_show\n  })\n\n  output$hover_info <- renderUI({\n    hover <- input$plot_hover\n    if (is.null(hover) || is.null(hover$x) || is.null(hover$y) || round(hover$x) <0 || round(hover$y)<0 ) {\n      return(NULL)\n    }\n    isolate(taxon_level<-input$taxonLevel)\n    isolate(plot_type<-input$plotTypeRadio)\n    if(identical(plot_type, \"heatmap\")){\n      point2<-horizontal_points(ggplot_object$data, hover)\n      point_x=point2$point_x\n    }else{\n\n      point<-nearPoints(ggplot_object$data, hover, xvar = column_x, yvar=column_y, allRows = T, addDist = T)\n      point_x=round(hover$x)\n      point2<-subset(point, dist_<10)\n    }\n    # print(ggplot_object$data)\n    # print(point)\n    # print(point)\n    cols <- c(column_y, column_x, \"rho\", \"pvalue\")\n\n    if(nrow(point2)>0){\n      if(nrow(point2)>1){\n        data_to_show <- point2[nrow(point2):1,..cols]\n        middle_point <- (round(hover$y+0.5)+round(hover$y-0.5))/2\n        point_tooltip(hover = hover, df = data_to_show, point_x=point_x,\n                    point_y = middle_point, left_offset = 30, right_offset = 33,\n                    top_offset = -62*nrow(point2))\n      }else{\n        data_to_show <- point2[,..cols]\n        if(!point2$selected_){\n          # when the point is not selected we need to discover the exact y point\n          # we just match the taxon selected with the index level of that taxon\n          row_num<-match(point2[[column_y]],levels(point[[column_y]]))\n          point_tooltip(hover = hover, df = data_to_show, point_x=point_x,\n                  point_y = row_num, left_offset = 30, right_offset = 33,\n                  top_offset = -68)\n        }else{\n          point_tooltip(hover = hover, df = data_to_show, point_x=point_x,\n                      point_y = round(hover$y), left_offset = 30, right_offset = 33,\n                      top_offset = -68)\n        }\n      }\n    }else{\n      return(NULL)\n    }\n  })\n\n  # download buttons\n  downloadButtons <- function(){}\n\n  output$btnDownloadPNG <- downloadHandler(\n    filename = \"plot.png\",\n    content = function(file) {\n      png(file, width=1200,height=800,units=\"px\")\n      print(ggplot_object)\n      dev.off()\n    }\n  )\n\n  output$btnDownloadEPS <- downloadHandler(\n    filename = \"plot.eps\",\n    content = function(file) {\n      setEPS()\n      postscript(file, width=16,height=10.67, family = \"Helvetica\")\n      print(ggplot_object)\n      dev.off()\n    }\n  )\n\n  output$btnDownloadSVG <- downloadHandler(\n    filename = \"plot.svg\",\n    content = function(file) {\n      svg(file, width=16,height=10.67)\n      print(ggplot_object)\n      dev.off()\n    }\n  )\n\n  output$btnDownloadCSV <- downloadHandler(\n    filename = \"data.csv\",\n    content = function(file) {\n      write.csv(ggplot_object$data, file)\n    }\n  )\n\n  shinyjs::hide(id = \"loading-content\", anim = TRUE, animType = \"fade\")\n  shinyjs::show(\"app-content\")\n})\n",
    "created" : 1500542166035.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3748223040",
    "id" : "76EFD8AD",
    "lastKnownWriteTime" : 1500629145,
    "last_content_update" : 1500629145634,
    "path" : "~/Projects/microbiomedb/correlation_app/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}